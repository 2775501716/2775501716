//memmove - 处理内存重叠问题的函数 - 语法形式为：  void* memmove(void* dest, void* src,size_t num)
//有不对的或者不够完善的地方欢迎大家前来斧正（@ . @）
void* my_memmove(void* dest, void* src, int num)
{
	assert(dest != NULL && src != NULL);
	if (src < dest)//当源头的地址低于目的地的地址时
	{
		char* pa = ((char*)dest) + num;//直接+20，单位是字节
		char* pb = ((char*)src) + num;//加20后，直接指向8的起始位置，然后减减则就是7的最后一个字节的位置，从哪个地方开始拷贝
		while (num--)
		{
			--pa;
			--pb;//这里的减减操作符是根据指针的类型来决定一步走多大的，char*类型就走一个字节，int就走4字节
			*pa = *pb;
		}
		return dest;
	}
	else if (src > dest)//源头地址高于目的地地址时
	{
		void* ret = dest;
		while (num--)
		{
			*(char*)dest = *(char*)src;//强制类型转换后解引用，不是强制转换后就是解引用
			++(char*)dest;//前置++是因为避免void*未知大小，
			              //而强制类型转换的语法形式为：（类型说明）（表达式），如果是后置++，则dest++是一个表达式而无法计算
			++(char*)src;
		}
		return ret;
	}
	else
	{
		return dest;
	}
}
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	my_memmove(arr+2,arr,20);
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
